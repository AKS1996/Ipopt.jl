using BinaryProvider

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libasl"], :libasl),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/ASL_jll.jl/releases/download/ASL-v0.1.1+3"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/ASL.v0.1.1.aarch64-linux-gnu.tar.gz", "73b0ce447c159710bda4547049ca42d236fd666f2e4066b1a5a9497e8da1e629"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/ASL.v0.1.1.aarch64-linux-musl.tar.gz", "3cb5f62b6b45d0e4bd14ec07e6bbc68c4fadfc914614ad91f48f0244d8e03085"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/ASL.v0.1.1.armv7l-linux-gnueabihf.tar.gz", "54f4f46929ecd8f35f5bf31e086bc4bbcdbed4d3dcff3ab57b3dd8c9f4d09587"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/ASL.v0.1.1.armv7l-linux-musleabihf.tar.gz", "0995d4b4d5533121d3fb7112b715615dfa6c8f0360109d8bf202862f59153be7"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/ASL.v0.1.1.i686-linux-gnu.tar.gz", "9c28803f63d6e408502fa4634b50d5919173ced9af979c0a676cfe2ec8534c75"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/ASL.v0.1.1.i686-linux-musl.tar.gz", "95bc34a1a778612d902c28891e9821e3365d8a526e1c6528c72c2aca1c7eb2cf"),
    Windows(:i686) => ("$bin_prefix/ASL.v0.1.1.i686-w64-mingw32.tar.gz", "5bd430c0dc2ed93f5b31879dab053147f83f619caaa5db92203163c7ba4c2aa3"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/ASL.v0.1.1.powerpc64le-linux-gnu.tar.gz", "a3d1f53b727ad752874e2f3588dcbf8571427cdbf3edc6ea89c225d66ce3ace4"),
    MacOS(:x86_64) => ("$bin_prefix/ASL.v0.1.1.x86_64-apple-darwin14.tar.gz", "57720ac5803504c03233864e65ad1a1028db22e811fa17ddac4aabf2ca3257ca"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/ASL.v0.1.1.x86_64-linux-gnu.tar.gz", "4b07f986d177db04a3fadb6e1be59badbff093557b7a7a9b91a80dadcea5f755"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/ASL.v0.1.1.x86_64-linux-musl.tar.gz", "2d5e4132f6a6c5f74f81b86ee4c1cd09b34ab838784a0fa6e6df2e391c537462"),
    FreeBSD(:x86_64) => ("$bin_prefix/ASL.v0.1.1.x86_64-unknown-freebsd11.1.tar.gz", "6f23d7291a7d4701dd39afb68d6e2148b2af692ccb5935ac7e70fefe2e14cafe"),
    Windows(:x86_64) => ("$bin_prefix/ASL.v0.1.1.x86_64-w64-mingw32.tar.gz", "fea7e430f3b1f732b8c80eed6776652f329b543ed5ce8f098f169f6361642b30"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end
